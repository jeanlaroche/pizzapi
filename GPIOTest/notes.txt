REFERENCE.
http://www.thelearningpit.com/lp/doc/7seg/7seg.html For 7 segment displays and multiplexing.
http://forums.shoryuken.com/discussion/47814/help-from-some-of-you-electronics-gurus-hot-tub-hardware-hacking for a guy hacking a spa

According to this, the wire could be like this:
1 - Ground (Black; Vss - pin 14 on the Motorola Chip)
2 - Spa Lamp on/off switch (Brown)
3 - Bubbler on/off switch (Red)
4 - Jets on/off switch (Orange)
5 - 5V DC (Yellow; VDD - pin 3 on the Motorola Chip)
6 - Motorola Chip "Data In", Pin 12 (.5K Resistance) AND Temperature Control Switch (5K Resistor - probably handles the delay) (Green)
7 - Motorola Chip "Clock", Pin 11 (Blue; .5K Resistance)
8 - Motorola Chip "Enable", Pin 10 (White; .5K Resistance)
The guy has this chip http://www.nxp.com/assets/documents/data/en/data-sheets/MC14489B.pdf MC14489B in his top controller. 
Is uses a synchronous serial interface SPI.
Nice tutorial on SPI: https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi
And this for the pi: https://learn.sparkfun.com/tutorials/raspberry-pi-spi-and-i2c-tutorial

REVERSE ENGINEERING THE CONNECTOR:
With Dave's scope, I was able to get this amazing info:
The RJ12 connector has the following colors:
W, Bk, R, Y, G, Bu
It's OK to plug a RJ12 into a RJ45 (8 pins) but of course, the colors will differ.

W:	Clock line. +5.5V roughly 40kHz
Bk:	Data line. +5.5V
R:	Ground
Y:	Temp button when connected to +5V with 500 O resistor
G:	Jets button when connected to +5V with 500 O resistor
Bu:	DC 5V.


SPI:
Do lsmod to see if SPI is available


GPIO reading
Reading 8 GPIOs simultanously, I'm getting about 60kHz sampling.
I checked that a AA batter triggers the input.
Recommended R for driving a LED from a GPIO: 330 Ohm. 
Max V for 0 input is 0.8V
Min V for 1 input is 1.3V.
PINs on PI: Seen from above

5V  5V  GND G14 G15 G18 GND G23 G24 GND
3V  GP2 GP3 GP4 GRD G17 G27 G22 3V  G10

The connector is a PCB mounted "IDC" connector.

HTTP WEB SERVER.
This http://electronicsbyexamples.blogspot.com/2014/02/raspberry-pi-control-from-mobile-device.html has a complete solution for controlling a PI with some javascript, ajax and flask
This one also provided the key insight into "onclick":
http://stackoverflow.com/questions/27716499/how-to-call-a-php-script-function-on-a-html-button-click
flask is the python code that allows a python script to respond to GET requests, using the URL to map the right function.
JQuery is the environment that combines HTML, CCS, javascript and AJAX to make designing a dynamic page super easy.
Using the $() stuff to run the intial code when the page is loaded, using anonymous function to bind the button clicks etc, is very cryptic.
You can do it in a more visible way by setting the onclick or onchange properties of the element to a regular javascript function. That's a lot clearer. 

Other links possibly of interest:
http://randomnerdtutorials.com/raspberry-pi-web-server-using-flask-to-control-gpios/
http://mattrichardson.com/Raspberry-Pi-Flask/index.html
http://blog.scphillips.com/posts/2012/12/a-simple-python-webserver/

